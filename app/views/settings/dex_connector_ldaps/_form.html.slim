= form_for [:settings, @certificate_holder], html: { class: "dex-connectors-form"} do |f|
  .form-group class="#{error_class_for(@certificate_holder, :name)}"
    = f.label :name
    = f.text_field :name, class: "form-control", value: @certificate_holder.name
    = error_messages_for(@certificate_holder, :name)
    small.form-text.text-muted
      | Name shown to user when selecting a connector

  hr
  h4 Server

  .form-group class="#{error_class_for(@certificate_holder, :host)}"
    = f.label :host
    = f.text_field :host, class: "form-control", value: @certificate_holder.host
    = error_messages_for(@certificate_holder, :host)
    small.form-text.text-muted
      | Host name of LDAP server reachable from the cluster

  .form-group class="#{error_class_for(@certificate_holder, :port)}"
    = f.label :port
    = f.text_field :port, class: "form-control", value: @certificate_holder.port
    = error_messages_for(@certificate_holder, :port)
    small.form-text.text-muted
      | The port on which to connect to the host (e.g. StartTLS On:
      code 389
      | , StartTLS Off:
      code 636
      | )

  .form-group class="#{error_class_for(@certificate_holder, :start_tls)}"
    = f.label :start_tls, "StartTLS"
    br
    .btn-group.btn-group-toggle data-toggle="buttons"
      = f.label :start_tls, nil, id: "dex_connector_ldap_start_tls_true_label", class: "btn btn-default #{'btn-primary active' if @certificate_holder.start_tls}"
        = f.radio_button :start_tls, "true", checked: @certificate_holder.start_tls
        | On
      = f.label :start_tls, nil, class: "btn btn-default #{'btn-primary active' unless @certificate_holder.start_tls}"
        = f.radio_button :start_tls, "false", checked: !@certificate_holder.start_tls
        | Off
    = error_messages_for(@certificate_holder, :start_tls)
    br
    small.form-text.text-muted
      | When enabled use StartTLS otherwise TLS will be used

  .form-group.form-group-certificate class="#{error_class_for(@cert, :certificate) if @cert.present?}"
    = f.label :certificate
    p Upload the certificate of the root CA that issued the LDAP server certificate
    = f.file_field :certificate, class: "form-control", required: @cert.present?
    - if @cert.present?
      = error_messages_for(@cert, :certificate)
      = f.text_area :current_cert, class: "form-control", value: @cert.certificate, rows: 7, readonly: "readonly"

  br
  h4 Authentication

  .form-group class="#{error_class_for(@certificate_holder, :bind_anon)}"
    = f.label :bind_anon, "Anonymous"
    br
    .btn-group.btn-group-toggle data-toggle="buttons"
      = f.label :bind_anon, nil, id: "dex_connector_ldap_bind_anon_true_label", class: "btn btn-default #{'btn-primary active' if @certificate_holder.bind_anon}", data: {toggle: "collapse", target: ".ldap-dn-authentication"}
        = f.radio_button :bind_anon, "true", checked: @certificate_holder.bind_anon
        | True
      = f.label :bind_anon, nil, class: "btn btn-default #{'btn-primary active' unless @certificate_holder.bind_anon}", data: {toggle: "collapse", target: ".ldap-dn-authentication"}
        = f.radio_button :bind_anon, "false", checked: !@certificate_holder.bind_anon
        | False
    = error_messages_for(@certificate_holder, :bind_anon)
    br
    small.form-text.text-muted
      | Use anonymous authentication to do initial user search

  .ldap-dn-authentication.collapse class="#{'in' if !@certificate_holder.bind_anon}" id="anonymous_bind_toggle" aria-expanded="true"
    .form-group class="#{error_class_for(@certificate_holder, :bind_dn)}" autocomplete="nope"
      = f.label :bind_dn, "DN"
      = f.text_field :bind_dn, class: "form-control", value: @certificate_holder.bind_dn, required: !@certificate_holder.bind_anon, disable: @certificate_holder.bind_anon
      = error_messages_for(@certificate_holder, :bind_dn)
      small.form-text.text-muted
        | Bind DN of user that can do user searches


    .form-group class="#{error_class_for(@certificate_holder, :bind_pw)}" autocomplete="nope"
      = f.label :bind_pw, "Password"
        / This is done to keep firefox from auto filling saved creditials.
      = f.text_field :bind_pw, class: "form_control settings-hidden", value:"none"
      = f.password_field :bind_pw, class: "form-control", value: @certificate_holder.bind_pw, required: !@certificate_holder.bind_anon, disable: @certificate_holder.bind_anon, autocomplete: "new-password"
      = error_messages_for(@certificate_holder, :bind_pw)
      small.form-text.text-muted
        | Password of the user

  hr
  h4 User Search
  .form-group class="#{error_class_for(@certificate_holder, :username_prompt)}"
    = f.label :username_prompt, "Identifying User Attribute"
    = f.text_field :username_prompt, class: "form-control", value: @certificate_holder.username_prompt
    = error_messages_for(@certificate_holder, :username_prompt)
    small.form-text.text-muted
      | Label of LDAP attribute users will enter to identify themselves (e.g.
      code username
      | )

  .form-group class="#{error_class_for(@certificate_holder, :user_base_dn)}"
    = f.label :user_base_dn, "Base DN"
    = f.text_field :user_base_dn, class: "form-control", value: @certificate_holder.user_base_dn
    = error_messages_for(@certificate_holder, :user_base_dn)
    small.form-text.text-muted
      | BaseDN where users are located (e.g.
      code
        | cn=users,dc=example,dc=com
      | )

  .form-group class="#{error_class_for(@certificate_holder, :user_filter)}"
    = f.label :user_filter, "Filter"
    = f.text_field :user_filter, class: "form-control", value: @certificate_holder.user_filter
    = error_messages_for(@certificate_holder, :user_filter)
    small.form-text.text-muted
      | Filter to specify type of user objects (e.g.
      code
        | "(objectClass=person)"
      | )

  br
  h4 User Attribute Map

  .form-group class="#{error_class_for(@certificate_holder, :user_attr_username)}"
    = f.label :user_attr_username, "Username"
    = f.text_field :user_attr_username, class: "form-control", value: @certificate_holder.user_attr_username
    = error_messages_for(@certificate_holder, :user_attr_username)
    small.form-text.text-muted
      | Attribute users will enter to identify themselves

  .form-group class="#{error_class_for(@certificate_holder, :user_attr_id)}"
    = f.label :user_attr_id, "ID"
    = f.text_field :user_attr_id, class: "form-control", value: @certificate_holder.user_attr_id
    = error_messages_for(@certificate_holder, :user_attr_id)
    small.form-text.text-muted
      | Attribute used to identify user within the system (e.g.
      code uid
      | )

  .form-group class="#{error_class_for(@certificate_holder, :user_attr_email)}"
    = f.label :user_attr_email, "Email"
    = f.text_field :user_attr_email, class: "form-control", value: @certificate_holder.user_attr_email
    = error_messages_for(@certificate_holder, :user_attr_email)
    small.form-text.text-muted
      | Attribute containing email of users

  .form-group class="#{error_class_for(@certificate_holder, :user_attr_name)}"
    = f.label :user_attr_name, "Name"
    = f.text_field :user_attr_name, class: "form-control", value: @certificate_holder.user_attr_name
    = error_messages_for(@certificate_holder, :user_attr_name)
    small.form-text.text-muted
      | Attribute used as username used within OIDC tokens

  hr
  h4 Group Search

  .form-group class="#{error_class_for(@certificate_holder, :group_base_dn)}"
    = f.label :group_base_dn, "Base DN"
    = f.text_field :group_base_dn, class: "form-control", value: @certificate_holder.group_base_dn
    = error_messages_for(@certificate_holder, :group_base_dn)
    small.form-text.text-muted
      | BaseDN where groups are located (e.g.
      code
        | cn=groups,dc=example,dc=com
      | )

  .form-group class="#{error_class_for(@certificate_holder, :group_filter)}"
    = f.label :group_filter, "Filter"
    = f.text_field :group_filter, class: "form-control", value: @certificate_holder.group_filter
    = error_messages_for(@certificate_holder, :group_filter)
    small.form-text.text-muted
      | Filter to specify type of group objects. (e.g.
      code
        | "(objectClass=group)"
      | )

  br
  h4 Group Attribute Map

  .form-group class="#{error_class_for(@certificate_holder, :group_attr_user)}"
    = f.label :group_attr_user, "User"
    = f.text_field :group_attr_user, class: "form-control", value: @certificate_holder.group_attr_user
    = error_messages_for(@certificate_holder, :group_attr_user)
    small.form-text.text-muted
      | Attribute to map as user (e.g.
      code
        | uid
      | )

  .form-group class="#{error_class_for(@certificate_holder, :group_attr_group)}"
    = f.label :group_attr_group, "Group"
    = f.text_field :group_attr_group, class: "form-control", value: @certificate_holder.group_attr_group
    = error_messages_for(@certificate_holder, :group_attr_group)
    small.form-text.text-muted
      | Attribute identifying membership (e.g.
      code
        | member
      | )

  .form-group class="#{error_class_for(@certificate_holder, :group_attr_name)}"
    = f.label :group_attr_name, "Name"
    = f.text_field :group_attr_name, class: "form-control", value: @certificate_holder.group_attr_name
    = error_messages_for(@certificate_holder, :group_attr_name)
    small.form-text.text-muted
      | Attribute to map as name (e.g.
      code
        | name
      | )

  .form-actions.clearfix
    = f.submit "Save", class: "btn btn-primary action", id: "ldap_conn_save"
    = link_to "Cancel", settings_dex_connector_ldaps_path, class: "btn btn-default action"
    button class="btn btn-primary" type="button" id="ldap_conn_test" Test Connection

  h4 id="ldap_conn_message" Test Connection first before saving

